consumes:
- application/json
info:
  title: A toy service for consent metadata
  description: A prototype microservice that stores participant data-sharing consent, metadata that may be used to inform row-level data access decisions, with respect for contextual integrity.
  version: 0.0.1
basePath: /v0
produces:
- application/json
schemes:
- http
swagger: "2.0" # version used by go-swagger tool

paths:
  /participants:
    post:
      operationId: post_participant
      summary: Add a participant, along with their default consent metadata
      parameters:
        - name: default_consent
          in: body
          schema:
            $ref: '#/definitions/DefaultConsent'
            example:
              genetic_consent_style: "SUF"
              clinical_consent_style: "SUF"
      responses:
        201:
          description: New participant created
          schema:
            $ref: '#/definitions/Participant'
          headers:
            Location:
              type: string
              format: url
        500:
          description: Internal error - default consent not created
          schema:
            $ref: "#/definitions/Error"

  /participants/{study_identifier}/default_consents:
    get:
      operationId: get_one_default_consent
      summary: Get participant's default consent metadata
      parameters:
        - $ref: '#/parameters/study_identifier'
      responses: 
        200:
          description: Return default consent
          schema:
            $ref: '#/definitions/DefaultConsent'
        404:
          description: Participant not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/Error"

  /participants/{study_identifier}/initialize_project_consent:
    # TODO what if participant is a part of multiple datasets? Should we be keeping track of catalogue-item as well?
    post:
      operationId: initialize_project_consent
      summary: Initialize project-specific consents for a participant
      parameters:
        - $ref: '#/parameters/study_identifier'
        - name: project_consent_initialization
          in: body
          schema:
            $ref: '#/definitions/ProjectConsentInitialization'
            example:
              project_application_id: 0
              status: "Complete"
      responses:
        201:
          description: Project consent created
          schema:
            $ref: '#/definitions/ProjectConsentInitialization'
          headers:
            Location:
              type: string
              format: url
        403:
          description: Forbidden to duplicate a project consent initialization
          schema:
            $ref: "#/definitions/Error"
        404:
          description: Participant not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error - project consent not created
          schema:
            $ref: "#/definitions/Error"
  
  /participants/{study_identifier}/project_consents:
    get:
      operationId: get_project_consents_by_participant
      summary: Get all project consents for a particular participant
      parameters:
      - $ref: '#/parameters/study_identifier'
      - name: project_application_id
        description: REMS application id associated with the desired ProjectConsent
        in: query
        type: integer
        format: int32
        minimum: 0
        x-example: 0
      responses: 
        200:
          description: Return all affiliated project consents
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectConsent'
        404:
          description: Participant not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/Error"
    put:
      operationId: put_project_consent
      summary: Update participant's project-specific consent metadata
      parameters:
        - $ref: '#/parameters/study_identifier'
        - name: project_consent
          in: body
          schema:
            $ref: '#/definitions/ProjectConsent'
            example:
              project_application_id: 0
              genetic_consent: false
              clinical_consent: false
      responses:
        200:
          description: Return the updated project consent
          schema:
            $ref: '#/definitions/ProjectConsent'
        404:
          description: Project consent not found. To create a new project consent, see the /participants/{study_identifier}/initialize_project_consent endpoint
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error - project consent not updated
          schema:
            $ref: "#/definitions/Error"

parameters:
  study_identifier:
    name: study_identifier
    description: UUID for all research data and metadata affiliated with a participant
    in: path
    type: string
    format: uuid
    x-example: bf3ba75b-8dfe-4619-b832-31c4a087a589
    required: true

definitions:
  Error:
    type: object
    required:
      - code
      - message
    properties: 
      code:
        type: integer
        minimum: 100000
        maximum: 599999
        description: Computer-readable error code, format 'HHHDDD' where HHH is the HTTP code and DDD is the error-specific detail codes
        example: 500001
      message:
        type: string
        description: Human-readable informational error message
        example: "Forbidden to modify existing default consent on post"
  Participant:
    type: object
    properties:
      study_identifier:
        type: string
        format: uuid
        description: UUID for all research data and metadata affiliated with a participant
        example: bf3ba75b-8dfe-4619-b832-31c4a087a589
        readOnly: true
  DefaultConsent:
    type: object
    properties:
      genetic_consent_style:
        type: string
        enum: [OO, OI, SUF]
        description: Specifies default consent choices for genetic data. Options- OO (Opt-In) | OI (Opt-Out) | SUF (Secondary Use Forbidden)
        example: "SUF"
        default: "SUF"
      clinical_consent_style:
        type: string
        enum: [OO, OI, SUF]
        description: Specifies default consent choices for clinical data. Options- OO (Opt-In) | OI (Opt-Out) | SUF (Secondary Use Forbidden)
        example: "SUF"
        default: "SUF"
  ProjectConsent:
    type: object
    required:
      - project_application_id
    properties:
      project_application_id:
        type: integer
        format: int32
        description: REMS identifier that links this consent metadata to the secondary or tertiary data-using project that it pertains to
        minimum: 0
        example: 0
      genetic_consent:
        type: boolean
        description: (T/F)- Participant has consented to having this project access their genetic data?
        example: false
        default: false
      clinical_consent:
        type: boolean
        description: (T/F)- Participant has consented to having this project access their clinical data?
        example: false
        default: false
  ProjectConsentInitialization:
    type: object
    required:
      - project_application_id
    properties:
      project_application_id:
        type: integer
        format: int32
        description: REMS ID for the data access application associated with the project
        minimum: 0
        example: 0
      study_identifier:
        type: string
        format: uuid
        description: UUID for the participant whose consents are being initialized
        example: bf3ba75b-8dfe-4619-b832-31c4a087a589
        readOnly: true
      status:
        type: string
        enum: [Processing, Complete]
        description: Specifies default consent choices for genetic data. Options- Processing | Complete
        example: "Processing"
        default: "Processing"
