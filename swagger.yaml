consumes:
- application/json
info:
  title: A toy service for consent metadata
  description: A prototype microservice that stores participant data-sharing consent, metadata that may be used to inform row-level data access decisions, with respect for contextual integrity.
  version: 0.0.1
basePath: /v0
produces:
- application/json
schemes:
- http
swagger: "2.0" # version used by go-swagger tool

paths:
  /participants:
    post:
      operationId: post_participant
      summary: Add a participant, along with their default consent metadata
      parameters:
        - name: default_consent
          in: body
          schema:
            $ref: '#/definitions/DefaultConsent'
            example:
              genetic_consent_style: "SUF"
              clinical_consent_style: "SUF"
      responses:
        201:
          description: New participant created
          schema:
            $ref: '#/definitions/Participant'
          headers:
            Location:
              type: string
              format: url
        500:
          description: Internal error - default consent not created
          schema:
            $ref: "#/definitions/Error"

  /participants/{study_identifier}/default_consents:
    get:
      operationId: get_one_default_consent
      summary: Get participant's default consent metadata
      parameters:
        - $ref: '#/parameters/study_identifier'
      responses: 
        200:
          description: Return default consent
          schema:
            $ref: '#/definitions/DefaultConsent'
        404:
          description: Participant not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/Error"

  /participants/{study_identifier}/project_consents:
    get:
      operationId: get_project_consents_by_participant
      summary: Get all project consents for a particular participant
      parameters:
      - $ref: '#/parameters/study_identifier'
      - name: project_application_id
        description: REMS application id associated with the desired ProjectConsent
        in: query
        type: integer
        format: int32
        minimum: 0
        x-example: 0
      responses: 
        200:
          description: Return all affiliated project consents
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectConsent'
        404:
          description: Participant not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/Error"
    put:
      operationId: put_project_consent
      summary: Update participant's project-specific consent metadata
      parameters:
        - $ref: '#/parameters/study_identifier'
        - name: project_consent
          in: body
          schema:
            $ref: '#/definitions/ProjectConsent'
            example:
              project_application_id: 0
              genetic_consent: false
              clinical_consent: false
      responses:
        200:
          description: Return the updated project consent
          schema:
            $ref: '#/definitions/ProjectConsent'
        404:
          description: Project consent not found. To create a new project consent, see the /rems/add_entitlement endpoint
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error - project consent not updated
          schema:
            $ref: "#/definitions/Error"

  /rems/add_entitlements:
    post:
      operationId: add_rems_entitlements
      summary: Ingests the REMS webhook that informs of the addition of new entitlements. May initialize new ProjectConsents. In this draft of the API, successfully posted items are committed in order of their appearance in the payload array. Once an item errors, it and all subsequent items are not committed, and the status for the errored item is returned.
      parameters:
        - name: rems_entitlements
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/RemsEntitlement'
              example:
                application: 137
                user: "username"
                resource: "bf3ba75b-8dfe-4619-b832-31c4a087a589"
                email: "bob@example.com"
      responses:
        202:
          description: Addition of Entitlements accepted for processing
        404:
          description: Resource not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: Internal error - Entitlements not accepted for processing.
          schema:
            $ref: "#/definitions/Error"

parameters:
  study_identifier:
    name: study_identifier
    description: UUID for all research data and metadata affiliated with a participant
    in: path
    type: string
    format: uuid
    x-example: bf3ba75b-8dfe-4619-b832-31c4a087a589
    required: true

definitions:
  Error:
    type: object
    required:
      - code
      - message
    properties: 
      code:
        type: integer
        minimum: 100000
        maximum: 599999
        description: Computer-readable error code, format 'HHHDDD' where HHH is the HTTP code and DDD is the error-specific detail codes
        example: 500001
      message:
        type: string
        description: Human-readable informational error message
        example: "Forbidden to modify existing default consent on post"
  Participant:
    type: object
    properties:
      study_identifier:
        type: string
        format: uuid
        description: UUID for all research data and metadata affiliated with a participant
        example: bf3ba75b-8dfe-4619-b832-31c4a087a589
        readOnly: true
  DefaultConsent:
    type: object
    properties:
      genetic_consent_style:
        type: string
        enum: [OO, OI, SUF]
        description: Specifies default consent choices for genetic data. Options- OO (Opt-In) | OI (Opt-Out) | SUF (Secondary Use Forbidden)
        example: "SUF"
      clinical_consent_style:
        type: string
        enum: [OO, OI, SUF]
        description: Specifies default consent choices for clinical data. Options- OO (Opt-In) | OI (Opt-Out) | SUF (Secondary Use Forbidden)
        example: "SUF"
    default:
      genetic_consent_style: "SUF"
      clinical_consent_style: "SUF"
  ProjectConsent:
    type: object
    required:
      - project_application_id
      - genetic_consent
      - clinical_consent
    properties:
      project_application_id:
        type: integer
        format: int32
        description: REMS identifier that links this consent metadata to the secondary or tertiary data-using project that it pertains to
        minimum: 0
        example: 0
      genetic_consent:
        type: boolean
        description: (T/F)- Participant has consented to having this project access their genetic data?
        example: false
      clinical_consent:
        type: boolean
        description: (T/F)- Participant has consented to having this project access their clinical data?
        example: false
  RemsEntitlement:
    type: object
    required:
      - application
      - resource
    properties:
      application:
        type: integer
        format: int32
        description: REMS ID for the data access application associated with the entitlement
        minimum: 0
        example: 0
      user:
        type: string
        description: REMS username for the user granted the entitlement
        example: "username"
      resource:
        type: string
        format: uuid
        description: The "resource name" for the object of the entitlement in REMS, ex. a URN. In this draft of the API, it should be a {study_identifier} uuid.
        example: "bf3ba75b-8dfe-4619-b832-31c4a087a589"
      email:
        type: string
        format: email
        description: The email of the user granted the entitlement
        example: "bob@example.com"